{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "test-datafacory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Parameterizedataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "emp12",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "opemp",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "filter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Cityname as string ('Pune')",
						"}",
						"source(output(",
						"          Education as string,",
						"          JoiningYear as string,",
						"          City as string,",
						"          PaymentTier as string,",
						"          Age as string,",
						"          Gender as string,",
						"          EverBenched as string,",
						"          ExperienceInCurrentDomain as string,",
						"          LeaveOrNot as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee filter(City == $Cityname) ~> filter",
						"filter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {School DBN} as string,",
						"          Date as string,",
						"          Enrolled as string,",
						"          Absent as string,",
						"          Present as string,",
						"          Released as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Surrogatekey dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "industry",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "indusriesop",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey"
						},
						{
							"name": "Rearrangecolumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {SIC Code} as string,",
						"          Description as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source",
						"source keyGenerate(output({S.No} as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey",
						"surrogateKey select(mapColumn(",
						"          {S.No},",
						"          {SIC Code},",
						"          Description",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Rearrangecolumns",
						"Rearrangecolumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Transform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "studenthealth",
								"type": "DatasetReference"
							},
							"name": "studentshealth"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "healthset",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "studentmentalhealth",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "filter1",
							"description": "where age is above 19"
						},
						{
							"name": "split1"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "split2"
						},
						{
							"name": "split3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Timestamp as string,",
						"          {Choose your gender} as string,",
						"          Age as string,",
						"          {What is your course?} as string,",
						"          {Your current year of Study} as string,",
						"          {What is your CGPA?} as string,",
						"          {Marital status} as string,",
						"          {Do you have Depression?} as string,",
						"          {Do you have Anxiety?} as string,",
						"          {Do you have Panic attack?} as string,",
						"          {Did you seek any specialist for a treatment?} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> studentshealth",
						"studentshealth filter(Age>='19') ~> filter1",
						"filter1 split({Choose your gender}=='Male',",
						"     disjoint: false) ~> split1@(Male, Female)",
						"split1@Male select(mapColumn(",
						"          Course = {What is your course?},",
						"          {Current year of Study} = {Your current year of Study},",
						"          { CGPA} = {What is your CGPA?},",
						"          {Marital status},",
						"          Depression = {Do you have Depression?},",
						"          Anxiety = {Do you have Anxiety?},",
						"          {Panic attack} = {Do you have Panic attack?},",
						"          {specialist for a treatment} = {Did you seek any specialist for a treatment?}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"split1@Female select(mapColumn(",
						"          {What is your course?},",
						"          {Your current year of Study},",
						"          {What is your CGPA?},",
						"          {Marital status},",
						"          {Do you have Depression?},",
						"          {Do you have Anxiety?},",
						"          {Do you have Panic attack?},",
						"          {Did you seek any specialist for a treatment?}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select1 split({specialist for a treatment}=='Yes',",
						"     disjoint: false) ~> split2@(Yes, No)",
						"select2 split({Did you seek any specialist for a treatment?}=='Yes',",
						"     disjoint: false) ~> split3@(yes, no)",
						"split3@no sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'test') ~> sink1",
						"split2@No sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Transform2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Healthcaredataset",
								"type": "DatasetReference"
							},
							"name": "Blob",
							"description": "Import data from Blob "
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText7",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText5",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "split1"
						},
						{
							"name": "split2"
						},
						{
							"name": "split3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Name as string,",
						"          Age as string,",
						"          Gender as string,",
						"          {Blood Type} as string,",
						"          {Medical Condition} as string,",
						"          {Date of Admission} as string,",
						"          Doctor as string,",
						"          Hospital as string,",
						"          {Insurance Provider} as string,",
						"          {Billing Amount} as string,",
						"          {Room Number} as string,",
						"          {Admission Type} as string,",
						"          {Discharge Date} as string,",
						"          Medication as string,",
						"          {Test Results} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Blob",
						"Blob derive(Gender = iif(Gender == 'Male', 'M', iif(Gender == 'Female', 'F', 'Other'))) ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(Age) && Age > '0') ~> filter1",
						"filter1 derive(Age = iif(Age >= '18' && Age <= '30', 'Teens', iif(Age > '30', 'Old', 'Other'))) ~> derivedColumn2",
						"derivedColumn2 split(Gender == 'M',",
						"     disjoint: false) ~> split1@(Male, Female)",
						"split1@Male split({Admission Type}== 'Emergency',",
						"     disjoint: true) ~> split2@(AdmissionTypeEmergency, Alltypes)",
						"split1@Female split({Admission Type}== 'Emergency',",
						"     disjoint: false) ~> split3@(AdmissiontypeEmergency, All)",
						"split2@AdmissionTypeEmergency sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          deptid as string,",
						"          deptname as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true) ~> sink1",
						"split3@AdmissiontypeEmergency sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Unpivotdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "fruits",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "purchasefruits",
								"type": "DatasetReference"
							},
							"name": "Sink"
						}
					],
					"transformations": [
						{
							"name": "unpivot"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER as string,",
						"          VENDER as string,",
						"          {APPLE } as string,",
						"          MANGO as string,",
						"          ORANGE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source",
						"source unpivot(output(",
						"          FRUITS as string,",
						"          QUANTITY as string",
						"     ),",
						"     ungroupBy(ORDER,",
						"          VENDER),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivot",
						"unpivot sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     partitionFileNames:['PurchasedFruits'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Sink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/join')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "emp"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText5",
								"type": "DatasetReference"
							},
							"name": "sink",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     skipLines: 1) ~> emp",
						"source(output(",
						"          deptid as string,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dept",
						"emp, dept join(department == deptid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'output') ~> sink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivotdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "hcds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pivotds",
								"type": "DatasetReference"
							},
							"name": "pivotdata"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Name as string,",
						"          Age as string,",
						"          Gender as string,",
						"          {Blood Type} as string,",
						"          {Medical Condition} as string,",
						"          {Date of Admission} as string,",
						"          Doctor as string,",
						"          Hospital as string,",
						"          {Insurance Provider} as string,",
						"          {Billing Amount} as string,",
						"          {Room Number} as string,",
						"          {Admission Type} as string,",
						"          {Discharge Date} as string,",
						"          Medication as string,",
						"          {Test Results} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 pivot(groupBy(Age),",
						"     pivotBy(Gender),",
						"     {} = count(Doctor),",
						"     columnNaming: '$N$V',",
						"     lateral: true,",
						"     partitionBy('hash', 1)) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> pivotdata"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/select_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sleephealths",
								"type": "DatasetReference"
							},
							"name": "sleephealth"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "selecttransform",
								"type": "DatasetReference"
							},
							"name": "output"
						}
					],
					"transformations": [
						{
							"name": "selecttransform"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Person ID} as string,",
						"          Gender as string,",
						"          Age as string,",
						"          Occupation as string,",
						"          {Sleep Duration} as string,",
						"          {Quality of Sleep} as string,",
						"          {Physical Activity Level} as string,",
						"          {Stress Level} as string,",
						"          {BMI Category} as string,",
						"          {Blood Pressure} as string,",
						"          {Heart Rate} as string,",
						"          {Daily Steps} as string,",
						"          {Sleep Disorder} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sleephealth",
						"sleephealth select(mapColumn(",
						"          {Persons ID} = {Person ID},",
						"          Gende = Gender,",
						"          Age,",
						"          Occupation,",
						"          sleepduration = {Sleep Duration},",
						"          {Physical Activity Level},",
						"          {Stress Level},",
						"          BP = {Blood Pressure},",
						"          {Heart Rate},",
						"          {Sleep Disorder}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selecttransform",
						"selecttransform sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     partitionFileNames:['selecttranform'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> output"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sort_flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "mentalhealth",
								"type": "DatasetReference"
							},
							"name": "mentalhealth"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "mentalhealth",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "sortongender"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Timestamp as string,",
						"          {Choose your gender} as string,",
						"          Age as string,",
						"          {What is your course?} as string,",
						"          {Your current year of Study} as string,",
						"          {What is your CGPA?} as string,",
						"          {Marital status} as string,",
						"          {Do you have Depression?} as string,",
						"          {Do you have Anxiety?} as string,",
						"          {Do you have Panic attack?} as string,",
						"          {Did you seek any specialist for a treatment?} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> mentalhealth",
						"mentalhealth sort(asc({Choose your gender}, true),",
						"     caseInsensitive: true) ~> sortongender",
						"sortongender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Timestamp as string,",
						"          {Choose your gender} as string,",
						"          Age as string,",
						"          {What is your course?} as string,",
						"          {Your current year of Study} as string,",
						"          {What is your CGPA?} as string,",
						"          {Marital status} as string,",
						"          {Do you have Depression?} as string,",
						"          {Do you have Anxiety?} as string,",
						"          {Do you have Panic attack?} as string,",
						"          {Did you seek any specialist for a treatment?} as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/validateschemadf')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Empdetail",
								"type": "DatasetReference"
							},
							"name": "Emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "emp12",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     ignoreNoFilesFound: false) ~> Emp",
						"Emp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Education as string,",
						"          JoiningYear as string,",
						"          City as string,",
						"          PaymentTier as string,",
						"          Age as string,",
						"          Gender as string,",
						"          EverBenched as string,",
						"          ExperienceInCurrentDomain as string,",
						"          LeaveOrNot as string",
						"     ),",
						"     partitionFileNames:['validateschema'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HealthFemale')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Transform",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"studentshealth": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-17T13:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HealthMale')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Transform",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"studentshealth": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-17T13:23:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SurrogatePipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Surrogatekey",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Surrogatekey dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-07T15:53:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Surrogatekey dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Unpivot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Unpivot",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Unpivotdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"Sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-06T15:48:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Unpivotdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/joinquery')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "join",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Leftjoin",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"dept": {},
									"ljoutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-16T11:35:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameterizedpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Parameterizedataflow",
								"type": "DataFlowReference",
								"parameters": {
									"Cityname": {
										"value": "'@{pipeline().parameters.City}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"employee": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"City": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-08T16:00:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Parameterizedataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivotpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Pivot Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pivotdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"pivotdata": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-02T15:43:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/pivotdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/selectpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "select dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "select_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sleephealth": {},
									"output": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-02T14:02:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/select_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sortorderpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sortorderpipeline",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "sort_flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"mentalhealth": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-31T15:22:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/sort_flow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/validateschemapipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "validateschemadf",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Emp": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-09T15:56:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/validateschemadf')]"
			]
		}
	]
}